#include<stdio.h>
#include<stdlib.h>
#define MAX 100
typedef struct node
{
	int data;
	struct node *left,*right;
	}node;
	struct stack
	{
		struct node *data[MAX];
		int top;
	}s;
	void init()
	{
		s.top=-1;
	}
	int isempty()
	{
		if(s.top==-1)
		return 1;
		else
		return 0;
	}
	int isfull()
	{
		if(s.top==MAX-1)
		return 1;
		else
		return 0;
	}
	void push(node *temp)
	{
		if(isfull())
	printf("stack is full");
	else
	{
		s.top++;
		s.data[s.top]=temp;
	}
	}
	struct node *pop()
	{
		struct node *temp;
		if(isempty())
		{
	
		printf("stack is underflow");
		}
		else
		{
		temp=s.data[s.top];
		s.top--;
	}
	return temp;
}
	node *create(node *root)
	{
		int i,n;
	node *temp,*parent,*newnode;
	printf("enter limit:");
	scanf("%d",&n);
	for(i=1;i<=n;i++)
	{
	newnode=(node*)malloc(sizeof(node));
	printf("enter value:");
	scanf("%d",&newnode->data);
	newnode->left=NULL;
	newnode->right=NULL;
	if(root==NULL)
	{
	root=newnode;
	continue;
}
	temp=root;
	while(temp!=NULL)
	{
	parent=temp;
	if(newnode->data<=temp->data)
	temp=temp->left;
	else
	temp=temp->right;
	}          
	if(newnode->data<=parent->data)
	parent->left=newnode;
	else
	parent->right=newnode;
}
	return root;
}
	void disp(node *root)
	{
		struct node *temp=root;
		while(temp!=NULL)
		{
			push(temp);
			temp=temp->left;
			
		}
		while(!isempty())
{
	temp=pop();
	if(temp->left==NULL &&temp->right==NULL)
	{
		printf("%d\t",temp->data);
		
	}
	temp=temp->right;
	while(temp!=NULL)
	{
		push(temp);
		temp=temp->left;
	}
	}	}

	int main()
	{
	node *root=NULL;
	root=create(root);
	printf("\n  leaf node:");
	init();
	disp(root);
}
